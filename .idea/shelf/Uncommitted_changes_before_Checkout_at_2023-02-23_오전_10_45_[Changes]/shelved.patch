Index: server/src/main/java/_BE_Project/answer/AnswerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package _BE_Project.answer;\r\n\r\nimport _BE_Project.Score.Score;\r\nimport _BE_Project.Score.ScoreService;\r\nimport _BE_Project.question.Question;\r\nimport _BE_Project.question.QuestionService;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.lang.reflect.Member;\r\nimport java.time.LocalDateTime;\r\nimport java.util.Optional;\r\n\r\n@Service\r\npublic class AnswerService {\r\n    private final AnswerRepository answerRepository;\r\n    private final QuestionService questionService;\r\n    private final ScoreService scoreService;\r\n\r\n    public AnswerService(AnswerRepository answerRepository, QuestionService questionService, ScoreService scoreService) {\r\n        this.answerRepository = answerRepository;\r\n        this.questionService = questionService;\r\n        this.scoreService = scoreService;\r\n    }\r\n\r\n    public Answer create(Long questionId, Answer answer, Member member){\r\n        Question question = questionService.findQuestion(questionId);\r\n        question.setViewCnt(question.getViewCnt()+1);\r\n//        question.setAnswered(true);\r\n        answer.setQuestion(question);\r\n        answer.setAccepted(false);\r\n        answer.setScore(0);\r\n//        answer.setMember(member); // 왜 오류뜨는지모르겠음\r\n\r\n        return answerRepository.save(answer);\r\n    }\r\n\r\n    public Answer findById(Long id){\r\n        return this.answerRepository.findById(id).get();\r\n    }\r\n\r\n    public Answer updateAnswer(Long answerId, Answer answer){\r\n        Answer findAnswer = findVerifiedAnswer(answerId);\r\n        findAnswer.setAnswerContent(answer.getAnswerContent());\r\n        findAnswer.setModifiedAt(LocalDateTime.now());\r\n        return answerRepository.save(findAnswer);\r\n    }\r\n    public Answer findVerifiedAnswer(Long answerId) {\r\n        Optional<Answer> optionalAnswer = answerRepository.findById(answerId);\r\n        if(optionalAnswer.isPresent()){\r\n            return optionalAnswer.get();\r\n        } else{\r\n            throw new DataNotFoundException(\"question not found\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 삭제 기능\r\n    public void delete(Long answerId){\r\n        Answer answer = findVerifiedAnswer(answerId);\r\n        Question question = answer.getQuestion();\r\n        question.setViewCnt(answer.getQuestion().getViewCnt()-1);\r\n        if (question.getViewCnt()==0){\r\n            question.setAnswered(false);\r\n        }\r\n        answerRepository.delete(answer);\r\n    }\r\n    // 추천 기능\r\n    public void upVote(Answer answer, Member member) {\r\n        Score score = scoreService.findByUserAndAnswer(member, answer);\r\n\r\n        if (score.getStatus()!=1){\r\n            score.setStatus(score.getStatus()+1);\r\n            answer.setScore(answer.getScore()+1);\r\n        }\r\n        score.setAnswer(answer);\r\n        score.setMember(member);\r\n        scoreService.saveScore(score);\r\n        answerRepository.save(answer);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/_BE_Project/answer/AnswerService.java b/server/src/main/java/_BE_Project/answer/AnswerService.java
--- a/server/src/main/java/_BE_Project/answer/AnswerService.java	
+++ b/server/src/main/java/_BE_Project/answer/AnswerService.java	
@@ -2,6 +2,7 @@
 
 import _BE_Project.Score.Score;
 import _BE_Project.Score.ScoreService;
+import _BE_Project.exception.DataNotFoundException;
 import _BE_Project.question.Question;
 import _BE_Project.question.QuestionService;
 import org.springframework.stereotype.Service;
Index: server/src/main/java/_BE_Project/answer/AnswerMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package _BE_Project.answer;\r\n\r\nimport org.mapstruct.Mapper;\r\nimport org.mapstruct.ReportingPolicy;\r\n\r\n@Mapper(componentModel = \"spring\",unmappedTargetPolicy = ReportingPolicy.IGNORE)\r\npublic interface AnswerMapper {\r\n    Answer answerPostDtoAnswer(AnswerDto.Post answerPostDto);\r\n    Answer answerPatchDtoAnswer(AnswerDto.Patch answerPatchDto);\r\n    default AnswerDto.Response answerToAnswerResponseDto(Answer answer){\r\n        AnswerDto.Response response = new AnswerDto.Response(\r\n                answer.isAccepted(),\r\n                answer.getScore(),\r\n                answer.getCreationDate(),\r\n                answer.getAnswerId(),\r\n                answer.getAnswerContent(),\r\n                answer.getQuestion().getQuestionId(),\r\n                answer.getMemberDto() // 에러남\r\n        );\r\n        return response;\r\n    };\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/_BE_Project/answer/AnswerMapper.java b/server/src/main/java/_BE_Project/answer/AnswerMapper.java
--- a/server/src/main/java/_BE_Project/answer/AnswerMapper.java	
+++ b/server/src/main/java/_BE_Project/answer/AnswerMapper.java	
@@ -15,7 +15,7 @@
                 answer.getAnswerId(),
                 answer.getAnswerContent(),
                 answer.getQuestion().getQuestionId(),
-                answer.getMemberDto() // 에러남
+                answer.getOwnerDto()
         );
         return response;
     };
Index: server/src/main/java/_BE_Project/exception/DataNotFoundException.java
===================================================================
diff --git a/server/src/main/java/_BE_Project/exception/DataNotFoundException.java b/server/src/main/java/_BE_Project/exception/DataNotFoundException.java
new file mode 100644
--- /dev/null	
+++ b/server/src/main/java/_BE_Project/exception/DataNotFoundException.java	
@@ -0,0 +1,15 @@
+package _BE_Project.exception;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = "entity not found")
+public class DataNotFoundException extends RuntimeException
+{
+    private static final long serialVersionUID = 1L;
+
+    public DataNotFoundException(String message)
+    {
+        super(message);
+    }
+}
Index: server/src/main/java/_BE_Project/answer/Answer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package _BE_Project.answer;\r\n\r\nimport _BE_Project.Score.Score;\r\nimport _BE_Project.audit.BaseTime;\r\nimport _BE_Project.member.dto.MemberDto;\r\nimport _BE_Project.member.entity.Member;\r\nimport _BE_Project.question.Question;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\nimport javax.persistence.*;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Getter\r\n@Setter\r\n@Entity\r\npublic class Answer {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long answerId;\r\n\r\n    // 답변을 적을수 있는 칸\r\n    @Column(nullable = false, columnDefinition = \"Text\")\r\n    private String answerContent;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name=\"question_id\")\r\n    private Question question;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"member_id\")\r\n    private Member member;\r\n\r\n    //\r\n    @Column\r\n    private boolean isAccepted;\r\n\r\n    // 좋아요의 개수\r\n    @Column\r\n    private int score;\r\n\r\n    // 답변을 달았을 때 시간을 알려주는 코드\r\n    @Column(nullable = false)\r\n    private LocalDateTime creationDate = LocalDateTime.now();\r\n\r\n    @Column(nullable = false)\r\n    private LocalDateTime modifiedAt = LocalDateTime.now();\r\n\r\n    @OneToMany(mappedBy = \"answer\" , cascade = CascadeType.REMOVE, orphanRemoval = true)\r\n    private List<Score> likeUsers;\r\n\r\n//    public MemberDto.owner getOwnerDto() {\r\n//        Member member = this.member;\r\n//        MemberDto.owner = new MemberDto.owner(member.getMemberId(), member.getNickname());\r\n//        return owner;\r\n//    }\r\n\r\n\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/server/src/main/java/_BE_Project/answer/Answer.java b/server/src/main/java/_BE_Project/answer/Answer.java
--- a/server/src/main/java/_BE_Project/answer/Answer.java	
+++ b/server/src/main/java/_BE_Project/answer/Answer.java	
@@ -55,11 +55,11 @@
     @OneToMany(mappedBy = "answer" , cascade = CascadeType.REMOVE, orphanRemoval = true)
     private List<Score> likeUsers;
 
-//    public MemberDto.owner getOwnerDto() {
-//        Member member = this.member;
-//        MemberDto.owner = new MemberDto.owner(member.getMemberId(), member.getNickname());
-//        return owner;
-//    }
+    public MemberDto.owner getOwnerDto() {
+        Member member = this.member;
+        MemberDto.owner owner = new MemberDto.owner(member.getMemberId(), member.getNickname());
+        return owner;
+    }
 
 
 
